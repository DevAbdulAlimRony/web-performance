**Third-party scripts often add to network overhead with things such as:
    -Firing additional network requests
    -Pulling in unoptimized images and videos
    -Insufficient HTTP caching, which forces frequent fetching of network resources
    -Insufficient server compression of resources
    -Multiple instances of frameworks and libraries pulled in by different third-party embeds

**Considerations:
    - When choosing third-party resources, favor those that send the least amount of code while still giving you the functionality you need.
    - Don't use the same functionality from two different vendors. You probably don't need two tag managers or two analytics platforms.
    - Identify Slow third party resource using chrome lighthouse analyze, run audits

**Optimize the loading process of third-party scripts with the following techniques:
    - Using the async or defer attribute on <script> tags: The async and defer attributes tell the browser that it can go on parsing the HTML while loading the script in the background, then execute the script after it loads.
      Scripts with the async attribute execute at the first opportunity after they finish downloading and before the window's load event. 
      Scripts with the defer attribute execute after HTML parsing is completely finished, but before the DOMContentLoaded event.
      Use async if it's important to have the script run earlier in the loading process.
      Use defer for less critical resources, such as a video player that's below the fold. 
    - Establishing early connections to required origins:<link rel="preconnect"> tells the browser that your page wants to establish a connection to another origin, and that you'd like the process to start as soon as possible.
      The preconnect hint is best used for only the most critical connections. For less important third-party domains, use <link rel=dns-prefetch>.
    - Lazy loading
    - lazysizes is a popular JavaScript library for lazy loading images and iframes
    - Self-hosting third-party scripts is an option that gives you more control over a script's loading process. By self-hosting you can:
        Reduce DNS lookup and round-trip times.
        Improve HTTP caching headers.
        Take advantage of HTTP/2, or the newer HTTP/3.
        Self-hosting comes with one big downside though: scripts can go out of date and won't get automatic updates when there's an API change or a security fix.
    -You can use service workers to cache scripts from third-party servers as an alternative to self-hosting. This gives you greater control over caching, while retaining the benefits of third-party CDNs.